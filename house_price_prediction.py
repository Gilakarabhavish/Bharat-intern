# -*- coding: utf-8 -*-
"""House_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15BR7tZWNSAOKy3Nfp4iNxPEaj1aikmWj
"""

import pandas as pd
import numpy as np

data=pd.read_csv('/content/sample_data/train.csv')

data.head()

data.shape

data.info()

for column in data.columns:
    print(data[column].value_counts())
    print("*"*20)

data.isna().sum()

data.drop(columns=['lot_size','lot_size_units'],inplace=True)

data.describe()

data.info()

data['beds'].value_counts()

data.head()

"""

# **Price per square feet**"""

data['price_per_sqft'] = data['price'] * 100000 / data['size']

data['price_per_sqft']

data.describe()

data.shape

data

data.drop(columns=['size_units'],inplace=True)

data.drop(columns=['price_per_sqft'],inplace=True)

data.head()

data.to_csv("final_dataset.csv")

X=data.drop(columns=['price'])
y=data['price']

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression,Lasso,Ridge
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score

X_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2, random_state=0)

print(X_train.shape)
print(y_train.shape)

column_trans = make_column_transformer((OneHotEncoder(sparse=False), ['beds']), remainder='passthrough')

scaler = StandardScaler()

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler

# X being feature matrix
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

lr = LinearRegression()
lr.fit(X_scaled, y)

pipe = make_pipeline(column_trans,scaler, lr)

pipe.fit(X_train,y_train)

y_pred_lr = pipe.predict(X_test)

r2_score(y_test,y_pred_lr)

"""# **Lasso**"""

lasso = Lasso()

pipe = make_pipeline(column_trans,scaler, lasso)

pipe.fit(X_train,y_train)

y_pred_lasso = pipe.predict(X_test)
r2_score(y_test,y_pred_lasso)

"""# **Ridge**"""

ridge = Ridge()

pipe = make_pipeline(column_trans,scaler, ridge)

pipe.fit(X_train,y_train)

y_pred_ridge = pipe.predict(X_test)
r2_score(y_test,y_pred_ridge)

print("No Regularization: ", r2_score(y_test,y_pred_lr))
print("Lasso: ", r2_score(y_test,y_pred_lasso))
print("Ridge: ", r2_score(y_test,y_pred_ridge))

import pickle

pickle.dump(pipe, open('RidgeModel.pkl','wb'))

from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.linear_model import Ridge
import pickle
import pandas as pd

data = pd.read_csv('final_dataset.csv')

numeric_features = ['beds', 'baths', 'size']
categorical_features = ['zip_code']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', SimpleImputer(strategy='mean'), numeric_features),
        ('cat', OneHotEncoder(handle_unknown='ignore', sparse_output=False), categorical_features) # Set sparse_output to False 
    ]
)

pipe = Pipeline([
    ('preprocessor', preprocessor),
    ('scaler', StandardScaler()), 
    ('regressor', Ridge())
])

X_train = data[numeric_features + categorical_features]
y_train = data['price'] 

pipe.fit(X_train, y_train)

with open('RidgeModel1.pkl', 'wb') as f:
    pickle.dump(pipe, f)